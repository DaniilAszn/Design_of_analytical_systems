import streamlit as st
import time
import joblib
import pandas as pd

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
def validate_input_params(p_1, p_2):
    MIN_VALUE_1 = 750
    MAX_VALUE_1 = 3500
    MIN_VALUE_2 = 80
    MAX_VALUE_2 = 300
    if not(p_1) or not(p_2):
        return "–∏–º–µ—é—Ç—Å—è –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è!"
    if not p_1.isdigit() or not p_2.isdigit():
        return "–≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!"
    p_1, p_2 = float(p_1), float(p_2)
    if not(MIN_VALUE_1 <= p_1 <= MAX_VALUE_1):
        return f"–º–∞—Å—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {MIN_VALUE_1} –¥–æ {MAX_VALUE_1} –∫–≥!"
    if not(MIN_VALUE_2 <= p_2 <= MAX_VALUE_2):
        return f"–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {MIN_VALUE_2} –¥–æ {MAX_VALUE_2} –∫–º/—á!"
    return None

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if "message" not in st.session_state:
    st.session_state.message = ""

# Setting
st.set_page_config(page_title="Classification cars", page_icon=":üöò:")

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
model = joblib.load("Baseline_SVM.pkl")


st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")


st.subheader("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:")
input_param_1 = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –º–∞—Å—Å–∞ (–≤ –∫–≥)")
input_param_2 = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–≤ –∫–º/—á)")



st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"):
    error_message = validate_input_params(input_param_1, input_param_2)

    if error_message:
        st.session_state.message = f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {error_message}"
        st.error(st.session_state.message)
    else:
        st.session_state.message = "–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª—å!"
        st.success(st.session_state.message)

        param_1_scaled = (float(input_param_1) - 2000) / 990
        param_2_scaled = (float(input_param_2) - 176) / 39
        input_features = pd.DataFrame({
            '–ü–æ–ª–Ω–∞—è –º–∞—Å—Å–∞ [–∫–≥]': [param_1_scaled],
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å [–∫–º/—á]': [param_2_scaled]
        })

        prediction = model.predict(input_features)[0]
        probability = max(model.predict_proba(input_features)[0])

        col_1_success_load, col_1_progress = st.columns([0.8, 1.5])

        progress_bar = col_1_progress.progress(0)
        for perc_completed in range(100):
            time.sleep(0.03)
            progress_bar.progress(perc_completed + 1)
        col_1_success_load.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        with st.spinner("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç, –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å"):
            time.sleep(10)

        st.markdown(f"–¢–∏–ø –∫—É–∑–æ–≤–∞: **{prediction.lower()}**, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ - **{round(probability * 100, 2)}%**")

        col_2_success_classify, _ = st.columns([0.6, 1])
        col_2_success_classify.success('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∞ –æ—Ç–≤–µ—Ç!')
